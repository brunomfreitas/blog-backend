CREATE SCHEMA blog;

CREATE USER blog_user WITH PASSWORD 'blog_password';

GRANT USAGE ON SCHEMA blog TO blog_user;

GRANT CREATE ON SCHEMA blog TO blog_user;

ALTER DEFAULT PRIVILEGES IN SCHEMA blog GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO blog_user;

GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA blog TO blog_user;

CREATE TABLE BLOG.PERSON
(
  ID SERIAL PRIMARY KEY,
  NAME VARCHAR(200) not NULL,
  CPF VARCHAR(14) NULL,  
  BIRTH DATE NOT NULL,    
  EMAIL VARCHAR(100) NULL,  
  STATUS BOOLEAN DEFAULT TRUE 
);

CREATE TABLE BLOG.USER (
  ID SERIAL PRIMARY KEY,    
  LOGIN VARCHAR(150) NOT NULL UNIQUE,
  PASSWORD VARCHAR(255) NOT NULL,
  STATUS BOOLEAN DEFAULT TRUE,
  ID_PERSON INT NOT NULL REFERENCES blog.person(id)
);

CREATE UNIQUE INDEX IF NOT EXISTS idx_user_login_unique ON blog."user"(login);

CREATE TABLE BLOG.CATEGORY (
  ID SERIAL PRIMARY KEY,
  NM_CATEGORY VARCHAR(50) NOT NULL,
  STATUS BOOLEAN DEFAULT TRUE
);

CREATE TABLE BLOG.POST_STATUS (
  ID SERIAL PRIMARY KEY,
  NM_STATUS VARCHAR(50) NOT NULL,
  STATUS BOOLEAN DEFAULT TRUE
);

CREATE TABLE BLOG.POST (
  ID SERIAL PRIMARY KEY,
  TITLE VARCHAR(50) NOT NULL,  
  SUBTITLE VARCHAR(100) NOT NULL,
  MESSAGE TEXT NOT NULL,  
  IMAGE TEXT NOT NULL,  
  CREATEDAT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATEDBY INT NOT NULL REFERENCES blog.person(id),
  POSTEDAT TIMESTAMP NULL,
  POSTEDBY INT NULL REFERENCES blog.person(id),
  CATEGORY INT NOT null REFERENCES blog.category(id),
  POST_STATUS INT NOT null REFERENCES blog.post_status(id)
);

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA blog TO blog_user;

ALTER DEFAULT PRIVILEGES IN SCHEMA blog GRANT USAGE, SELECT ON SEQUENCES TO blog_user;

